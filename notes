let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/Escritorio/Proyecto/UrNotes
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
let s:shortmess_save = &shortmess
if &shortmess =~ 'A'
  set shortmess=aoOA
else
  set shortmess=aoO
endif
badd +9 ~/Escritorio/Proyecto/UrNotes/src/App.jsx
badd +9 ~/Escritorio/Proyecto/UrNotes/src/components/Notes.jsx
badd +22 ~/Escritorio/Proyecto/UrNotes/src/components/NotesList.jsx
argglobal
%argdel
edit ~/Escritorio/Proyecto/UrNotes/src/components/NotesList.jsx
let s:save_splitbelow = &splitbelow
let s:save_splitright = &splitright
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
2wincmd h
wincmd w
wincmd w
let &splitbelow = s:save_splitbelow
let &splitright = s:save_splitright
wincmd t
let s:save_winminheight = &winminheight
let s:save_winminwidth = &winminwidth
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe 'vert 1resize ' . ((&columns * 30 + 95) / 190)
exe 'vert 2resize ' . ((&columns * 94 + 95) / 190)
exe 'vert 3resize ' . ((&columns * 64 + 95) / 190)
argglobal
enew
file neo-tree\ filesystem\ \[1]
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=99
setlocal fml=1
setlocal fdn=20
setlocal fen
wincmd w
argglobal
balt ~/Escritorio/Proyecto/UrNotes/src/App.jsx
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=99
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
1,3fold
6,9fold
18,23fold
26,28fold
25,31fold
14,32fold
13,33fold
12,34fold
11,35fold
5,35fold
let &fdl = &fdl
let s:l = 22 - ((21 * winheight(0) + 26) / 53)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 22
normal! 014|
wincmd w
argglobal
if bufexists(fnamemodify("~/Escritorio/Proyecto/UrNotes/src/components/Notes.jsx", ":p")) | buffer ~/Escritorio/Proyecto/UrNotes/src/components/Notes.jsx | else | edit ~/Escritorio/Proyecto/UrNotes/src/components/Notes.jsx | endif
if &buftype ==# 'terminal'
  silent file ~/Escritorio/Proyecto/UrNotes/src/components/Notes.jsx
endif
balt ~/Escritorio/Proyecto/UrNotes/src/App.jsx
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=99
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
1,2fold
10,12fold
10,13fold
16,17fold
16,18fold
22,27fold
20,28fold
37,38fold
35,47fold
34,49fold
33,50fold
4,50fold
let &fdl = &fdl
let s:l = 20 - ((19 * winheight(0) + 26) / 53)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 20
normal! 03|
wincmd w
2wincmd w
exe 'vert 1resize ' . ((&columns * 30 + 95) / 190)
exe 'vert 2resize ' . ((&columns * 94 + 95) / 190)
exe 'vert 3resize ' . ((&columns * 64 + 95) / 190)
tabnext 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20
let &shortmess = s:shortmess_save
let &winminheight = s:save_winminheight
let &winminwidth = s:save_winminwidth
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
